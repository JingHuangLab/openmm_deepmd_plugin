name: Test in CMake Building and Unit Test

on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master", "dev" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  OPENMM_DIR: /opt/conda/
  DEEPMD_DIR: /usr/local/libdeepmd/libdeepmd_c/
  CMAKE_C_COMPILER: /opt/conda/bin/x86_64-conda-linux-gnu-cc
  CMAKE_CXX_COMPILER: /opt/conda/bin/x86_64-conda-linux-gnu-c++
  LD_LIBRARY_PATH: /usr/local/libdeepmd/libdeepmd_c/lib/

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted
    container: ghcr.io/dingye18/openmm_deepmd_plugin-test:c_api

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DOPENMM_DIR=${{env.OPENMM_DIR}} -DDEEPMD_DIR=${{env.DEEPMD_DIR}} -DCMAKE_C_COMPILER=${{env.CMAKE_C_COMPILER}} -DCMAKE_CXX_COMPILER=${{env.CMAKE_CXX_COMPILER}}

    - name: Build
      # Build your program with the given configuration
      run: |
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${{env.LD_LIBRARY_PATH}}
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test in C API
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: make test
    
    - name: install
      working-directory: ${{github.workspace}}/build
      run: | 
        make install
        make PythonInstall

    - name: Test in Python API
      working-directory: ${{github.workspace}}
      run: python -m OpenMMDeepmdPlugin.tests.test_dp_plugin_nve